---
title: "Mapa do tesouro"
subtitle: "Um curso de web scraping e criação de mapas"
author: "Pet Estatística"
format: 
  revealjs:
    theme: serif
    logo: logo_preta.png
    css: logo.css
include-after: |
  <script type="text/javascript">
    Reveal.on('ready', event => {
      if (event.indexh === 0) {
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
    });
    Reveal.addEventListener('slidechanged', (event) => {
      if (event.indexh === 0) {
        Reveal.configure({ slideNumber: null });
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
      if (event.indexh === 1) { 
        Reveal.configure({ slideNumber: 'c' });
        document.querySelector("div.has-logo > img.slide-logo").style.display = null;
      }
    });
  </script>
editor: source
---

## Ambiente e pacotes
:::: {.columns}

::: {.column width="50%"}
<br>
![](mural2.png)
:::

::: {.column width="50%"}
<br>
<br>
<br>
``` r
install.packages("tidyverse")
install.packages("rvest")
install.packages("stringr")
library(tidyverse)
library(rvest)
library(stringr)
```

:::

::::
# Estrutura de sites

<br>

::: aside
Inspecionar página.
:::

## Tags HTML

- < a > link.

- < h1 > < h2 > < h3 >... Cabeçalhos.

- < div > elemento de divisão da página.

- < p > elemento de parágrafo.

- < ul > tag para uma lista não ordenada.

- < il > tag para os itens da lista.

- < span > conteiner genérico.

- < table > tabela.

## Atributos CSS

- .classe : vários

- #id : único

# Raspagem de dados 

## Passo a passo de uma raspagem

1. Identificar a URL
2. Ler o HTML
3. Identificar o elemento
4. Extrair o texto ou atributo

## Algumas funções do rvest:


- read_html()
- html_elements()
- html_element()
- html_text2()
- html_attr()
- html_table()

::: aside
?Função <br>
help("Função")
:::

## Estrutura básica de uma raspagem:

```r
url <- "link"

html <- read_html(url)

variavel <- html %>%
  html_elements("tag .class #id") %>%
  html_text2()
```



# Prática!

Vamos praticar esses conceitos no R e ver como faríamos para raspar os 20 melhores filmes até 2020 do NSC.

# Tratamento de Strings

#
:::: {.columns}

::: {.column width="40%"}
## Funções recorrentes do stringr:

- str_replace()
- str_remove()
:::

::: {.column width="60%"}

## Expressão regular
- ^ = inicio da linha
- \\\\d = um digito
- \+ = 1 ou mais vezes
- \\\\s = espaço
- [A-Za-z] = letras maiúsculas e minúsculas
:::

::::

# Exercício proposto : Raspar os dados do wikipedia

Lista de unidades federativas do Brasil por alfabetização



# Finalização

## Outros métodos de webscraping

- Páginas dinâmicas
- APIs "escondidas" 

::: aside
As opções são diversas e o limite é a sua imaginação.
:::

# Agradecemos a participação de todos!

